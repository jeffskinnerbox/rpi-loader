
# Maintainer:   jeffskinnerbox@yahoo.com / www.jeffskinnerbox.me
# Version:      1.5.0
#
# DESCRIPTION
#    Role file to install and setup my dot files (e.g. .~/vim, ~/.bashrc, etc.) required by my home Ubuntu Linux machine
#
# TESTING
#    YAML linter to spot Ansible YAML syntax errors
#       yamllint rpi-loader.yml roles/dotfiles-pi/tasks
#       ansible-lint roles/dotfiles-pi/tasks/main.yml
#
#    Ansible linter to spot Ansible playbook syntax errors
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --syntax-check
#
#    Generate a list of tasks that will be executed for the tags
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags dotfiles-pi --skip-tags uninstall --list-tasks
#
#    Ansible dry-run checking for errors and showing results of a run
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags dotfiles-pi --skip-tags uninstall --check
#
# EXECUTION
#    Run the entire playbook for real
#       ansible-playbook -i inventory -l test-pi  rpi-loader.yml --tags dotfiles-pi --skip-tags uninstall
#
# SOURCES
#    The holy setup - Treat your dotfiles better - https://www.iduoad.com/posts/treat-your-dotfiles-better/
#


---


# --- Install Block of Tasks ---------------------------------------------------

- name: Install Configuration Files Defined in .dotfiles
  tags: ['never', 'install']     # 'never' implies you must pass the tag to execute this block
  block:
    - name: Install required packages to suport .dotfiles (as root)
      ansible.builtin.apt:
        state: present                       # for packages, use 'present' or 'latest' to install and 'absent' to remove
        update_cache: true                   # update the apt repository list cache
        cache_valid_time: 86400              # update the apt cache if it is older than this seconds
        pkg:
          - 'git'
          - 'stow'
          - 'snapd'
          - 'vim'
          - 'tmux'
          - 'vim-gtk3'
          - 'screen'
          - 'gnome-terminal'
          - 'wmctrl'
          - 'libcanberra-gtk-module'
          - 'libcanberra-gtk3-module'

    - name: Install version of nvim via snap (as root)
      community.general.snap:
        state: present                       # for packages, use 'present' or 'latest' to install and 'absent' to remove
        name: nvim
        classic: true

    - name: Clone the .dotfiles github repository (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ app_user }}"
      ansible.builtin.git:
        repo: 'http://github.com/jeffskinnerbox/.dotfiles.git'
        dest: '{{ app_user_home }}/.dotfiles'
        clone: true                          # if false, do not clone the repository even if it does not exist locally
        force: true                          # if true, any modified files in the working repository will be discarded
        update: true                         # perform an update on submodules in this git repository
        version: HEAD                        # noqa: latest

    - name: Stow the .dotfiles targetted for $HOME (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.command:
        cmd: stow --dir={{ app_user_home }}/.dotfiles --target={{ app_user_home }} --stow {{ item.package }}
        creates: "{{ app_user_home }}/{{ item.object }}"
      loop:
        - {package: 'pkg-vim', object: '.vim'}
        - {package: 'pkg-tmux', object: '.tmux'}
        - {package: 'pkg-bash', object: '.bashrc'}
        - {package: 'pkg-X', object: '.xsessionrc'}
        - {package: 'pkg-screen', object: '.screenrc'}
        # - {package: 'pkg-i3', object: '.i3'}
        # - {package: 'pkg-conky', object: '.conky'}

    - name: Make sure ~/.config directory is created (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.file:
        path: "{{ app_user_home }}/.config"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: directory
        recurse: true
        mode: 0750     # mode 0750 = user can rwx, the group write, and others cannot read, write, or execute

    - name: Stow the .dotfiles targetted for $XDG_CONFIG_HOME (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.command:
        cmd: "stow --dir={{ app_user_home }}/.dotfiles --target={{ app_user_home }}/.config --stow {{ item.package }}"
        creates: "{{ app_user_home }}/{{ item.object }}"
      loop:
        - {package: 'pkg-nvim', object: '.config/nvim'}
        - {package: 'pkg-yamllint', object: '.config/yamllint'}
        - {package: 'pkg-ansible-lint', object: '.config/ansible-lint.yml'}

# --- Uninstall Block of Tasks -------------------------------------------------

- name: Uninstall Configuration Files Defined in .dotfiles
  tags: ['never', 'uninstall']   # 'never' implies you must pass the other tag to execute this block
  block:
    - name: Remove all stow symbolic links within $HOME (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.command:
        cmd: "stow --dir={{ app_user_home }}/.dotfiles --target={{ app_user_home }} --delete {{ item.package }}"
        removes: "{{ app_user_home }}/{{ item.object }}"
      loop:
        - {package: 'pkg-vim', object: '.vim'}
        - {package: 'pkg-tmux', object: '.tmux'}
        - {package: 'pkg-bash', object: '.bashrc'}
        - {package: 'pkg-X', object: '.xsessionrc'}
        - {package: 'pkg-screen', object: '.screenrc'}
        # - {package: 'pkg-i3', object: '.i3'}
        # - {package: 'pkg-conky', object: '.conky'}


    - name: Remove all stow symbolic links within $XDG_CONFIG_HOME (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.command:
        cmd: "stow --dir={{ app_user_home }}/.dotfiles --target={{ app_user_home }}/.config --delete {{ item.package }}"
        removes: "{{ app_user_home }}/{{ item.object }}"
      loop:
        - {package: 'pkg-nvim', object: '.config/nvim'}
        - {package: 'pkg-yamllint', object: '.config/yamllint'}
        - {package: 'pkg-ansible-lint', object: '.config/ansible-lint.yml'}

    - name: Remove the .dotfiles directory (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.file:
        path: "{{ app_user_home }}/.dotfiles"
        state: absent

# ------------------------------------------------------------------------------

