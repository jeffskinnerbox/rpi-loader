
# Maintainer:   jeffskinnerbox@yahoo.com / www.jeffskinnerbox.me
# Version:      1.5.0
#
# DESCRIPTION
#    Role file to create the the duplicati backup process
#
# TESTING
#    YAML linter to spot Ansible YAML syntax errors
#       yamllint rpi-loader.yml roles/duplicati/tasks
#       ansible-lint roles/duplicati/tasks/main.yml
#
#    Ansible linter to spot Ansible playbook syntax errors
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --syntax-check
#
#    Generate a list of tasks that will be executed for the tags
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags duplicati --skip-tags uninstall --list-tasks
#
#    Ansible dry-run checking for errors and showing results of a run
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags duplicati --skip-tags uninstall --check
#
# EXECUTION
#    Run the entire playbook for real
#       ansible-playbook -i inventory -l test-pi  rpi-loader.yml --tags duplicati --skip-tags uninstall
#
# SOURCES
#


---


# --- Install Block of Tasks ---------------------------------------------------

- name: Install Duplicati
  tags: ['never', 'install']     # 'never' implies you must pass the tag to execute this block
  block:
    # - name: Create directory for docker compose files and duplicati database (as user)
    #   become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
    #   become_user: "{{ backup_user }}"
    #   file:
    #     state: directory
    #     path: "{{ duplicati_compose_path }}"

    # - name: Copy docker compose file and environment variables (as user)
    #   become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
    #   become_user: "{{ backup_user }}"
    #   copy:
    #     src: "files/{{ item }}"
    #     dest: "{{ duplicati_compose_path }}/{{ item }}"
    #     mode: u=rw,g=r,o=r
    #   loop:
    #     - duplicati-docker-compose.yml
    #     - environment

    # - name: Create a duplicati container via docker compose (as root)
    #   docker_compose:
    #     project_src: "{{ duplicati_compose_path }}"
    #     state: present
    #     env_file: environment
    #     files:
    #       - duplicati-docker-compose.yml

    - name: Create a directory for duplicati configuration and database (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.file:
        state: directory
        mode: a+rwx, o-w
        path: "{{ duplicati_config_path }}"

    - name: Create a duplicati container via docker (as root)
      community.general.docker_container:
        name: duplicati
        state: started       # must be one of: absent, present, stopped, started
        image: linuxserver/duplicati:latest
        ports:
          - "{{ duplicati_port }}:8200"
        env:
          CLI_ARGS: "--exclude='*/tmp/' --exclude='*Trash/' --exclude='*.Trash/'"
        volumes:
          - "{{ duplicati_config_path }}:/config"
          - "{{ duplicati_source_path }}:/source"
        detach: true                     # set to true to leave the container running in background
        container_default_behavior: compatibility
        restart_policy: unless-stopped   # must be one of: no, on-failure, always, unless-stopped


# --- Uninstall Block of Tasks -------------------------------------------------

- name: Uninstall Duplicati
  tags: ['never', 'uninstall']     # 'never' implies you must pass the tag to execute this block
  block:
    - name: Stop the docker container (as root)
      community.general.docker_container:
        name: duplicati
        state: stopped

    - name: Remove the docker image and docker networks (as root)
      community.general.docker_container:
        name: duplicati
        purge_networks: true
        state: absent

    - name: Delete the docker compose files and persistent data (as root)
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - "{{ backup_user_home }}/src/duplicati"
        - "{{ duplicati_config_path }}"


# ------------------------------------------------------------------------------

