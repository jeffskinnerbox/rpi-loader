
# Maintainer:   jeffskinnerbox@yahoo.com / www.jeffskinnerbox.me
# Version:      1.5.0
#
# DESCRIPTION
#    Role file to install resource file (.vimrc) and plugins for vi/vim editor
#
# TESTING
#    YAML linter to spot Ansible YAML syntax errors
#       yamllint rpi-loader.yml roles/vim-config/tasks
#       ansible-lint roles/vim-config/tasks/main.yml
#
#    Ansible linter to spot Ansible playbook syntax errors
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --syntax-check
#
#    Generate a list of tasks that will be executed for the tags
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags vim-config --skip-tags uninstall --list-tasks
#
#    Ansible dry-run checking for errors and showing results of a run
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags vim-config --skip-tags uninstall --check
#
# EXECUTION
#    Run the entire playbook for real
#       ansible-playbook -i inventory -l test-pi  rpi-loader.yml --tags vim-config --skip-tags uninstall
#
# SOURCES
#    How to use Ansible to configure Vim - https://www.redhat.com/sysadmin/ansible-configure-vim
#
#  --   Deprecated   --   Deprecated   --   Deprecated   --   Deprecated   --
#


---


# --- Install Block of Tasks ---------------------------------------------------

- name: Install Vim Terminal Visual Editor With Custom .vimrc and Plugins
  tags: ['never', 'install']     # 'never' implies you must pass the tag to execute this block
  block:
    - name: Install required packages to suport vim (as root)
      ansible.builtin.apt:
        state: present           # for packages, use 'present' or 'latest' to install and 'absent' to remove
        update_cache: true       # update the apt repository list cache
        cache_valid_time: 86400  # update the apt cache if it is older than this seconds
        pkg: ['stow', vim', 'vim-gtk3', 'libcanberra-gtk-module', 'libcanberra-gtk3-module', 'git']

    - name: Clone the .vim github repository (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ app_user }}"
      ansible.builtin.git:
        repo: 'http://github.com/jeffskinnerbox/.vim.git'
        dest: '{{ app_user_home }}/.vim'
        clone: true                          # if false, do not clone the repository even if it does not exist locally
        force: true                          # if true, any modified files in the working repository will be discarded
        update: true                         # perform an update on submodules in this git repository
        version: HEAD                        # noqa: latest
      when: not file_exists.stat.exists

    - name: Create symbolic links for .vimrc and .gvimrc (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.file:
        src: "{{ app_user_home }}/.vim/{{ item }}"
        dest: "{{ app_user_home }}/.{{ item }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: link
      loop:
        - vimrc
        # - gvimrc

    - name: Ensure .vim/backup, .vim/tmp directories are created (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: '{{ app_user }}'
      ansible.builtin.file:
        path: "{{ app_user_home }}/.vim/{{ item }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        state: directory
        recurse: true
        mode: 0750     # mode 0750 = user can rwx, the group write, and others cannot read, write, or execute
      loop:
        - backup
        - tmp

# --- Uninstall Block of Tasks -------------------------------------------------

- name: Uninstall Vim Terminal Visual Editor
  tags: ['never', 'uninstall']   # 'never' implies you must pass the other tag to execute this block
  block:
    - name: Remove all login vim related files & directories (as root)
      ansible.builtin.file:
        path: "{{ app_user_home }}/{{ item }}"
        state: absent
      loop: ['.vim', '.vimrc']

# ------------------------------------------------------------------------------

