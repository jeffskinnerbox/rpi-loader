
# Maintainer:   jeffskinnerbox@yahoo.com / www.jeffskinnerbox.me
# Version:      1.5.0
#
# DESCRIPTION
#    Role file to create the the rsnapshot backup process
#
# TESTING
#    YAML linter to spot Ansible YAML syntax errors
#       yamllint rpi-loader.yml roles/rsnapshot/tasks
#       ansible-lint roles/rsnapshot/tasks/main.yml
#
#    Ansible linter to spot Ansible playbook syntax errors
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --syntax-check
#
#    Generate a list of tasks that will be executed for the tags
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags rsnapshot --skip-tags uninstall --list-tasks
#
#    Ansible dry-run checking for errors and showing results of a run
#       ansible-playbook -i inventory -l test-pi rpi-loader.yml --tags rsnapshot --skip-tags uninstall --check
#
# EXECUTION
#    Run the entire playbook for real
#       ansible-playbook -i inventory -l test-pi  rpi-loader.yml --tags rsnapshot --skip-tags uninstall
#
#        sudo rsnapshot configtest
#        sudo rsnapshot -t hourly
#        sudo /home/backup_user/bin/rsnapshot-wrapper.sh hourly
#
# SOURCES
#


---


# --- Install Block of Tasks ---------------------------------------------------

- name: Install Rsnapshot and the Automation Backup Shell Scripts that Use It
  tags: ['never', 'install']     # 'never' implies you must pass the tag to execute this block
  block:
    - name: Install prerequisite tools (as root)
      ansible.builtin.apt:
        state: present           # must be one of: absent, build-dep, fixed, latest, present
        update_cache: true       # update the apt repository list cache
        cache_valid_time: 86400  # update the apt cache if it is older than this seconds
        pkg: ['git', 'git-lfs', 'build-essential', 'libsystemd-dev', 'grsync']

    - name: Create a '~/src' and '~/bin' directory if don't exist (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.file:
        path: "{{ backup_user_home }}/{{ item }}"
        state: directory
        mode: a+rwx, g-w, o-w
      loop:
        - src
        - bin

    - name: Check if rsnapshot git repository exists (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.stat:
        path: '{{ backup_user_home }}/src/rsnapshot'
      register: file_exists

    - name: Clone the rsnapshot repository (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.git:
        repo: "https://github.com/rsnapshot/rsnapshot.git"
        dest: "{{ backup_user_home }}/src/rsnapshot"
        clone: true                          # if false, do not clone the repository even if it does not exist locally
        force: true                          # if true, any modified files in the working repository will be discarded
        update: true                         # perform an update on submodules in this git repository
        version: HEAD                        # noqa: latest
      when: not file_exists.stat.exists

    - name: Do the preparation work so you can perform the build (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.command:
        cmd: "{{ item }}"
        chdir: "{{ backup_user_home }}/src/rsnapshot"
      register: my_output                                # registers the command output
      changed_when: my_output.rc != 0                    # uses the return code to define when the task has changed
      loop:
        - ./autogen.sh                 # generates the configure script
        - ./configure --sysconfdir=/etc

    - name: Build rsnapshot tools (as root)
      community.general.make:
        chdir: "{{ backup_user_home }}/src/rsnapshot"
        target: "{{ item }}"
      loop:
        - install

    - name: Copy the configuration file to it destination (as root)
      ansible.builtin.shell:
        cmd: cp /etc/rsnapshot.conf.default /etc/rsnapshot.conf
      args:
        executable: /bin/bash
        creates: /etc/rsnapshot.conf

    - name: Copy the rsnapshot executable to /usr/bin (as root)
      ansible.builtin.shell:
        cmd: cp /usr/local/bin/rsnapshot /usr/bin/rsnapshot
      args:
        executable: /bin/bash
        creates: /usr/bin/rsnapshot

    # --------------------------------------------------------------------------

    - name: Copy backup's shell scripts to ~/backup_user/bin (as root)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.copy:
        src: "./scripts/{{ item }}"
        dest: "{{ backup_user_home }}/bin/{{ item }}"
        mode: u+rwx,g-rwx,o-rwx
        remote_src: false
      loop:
        - full-backup.sh
        - rsnapshot-wrapper.sh
        - rsync-wrapper.sh
        - apprise.sh

    - name: Copy rsync exclude files and secrets to ~/backup_user (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.copy:
        src: ./files/{{ item }}
        dest: "{{ backup_user_home }}/{{ item }}"
        mode: u+rw,g-rwx,o-rwx
        remote_src: false
      loop:
        - rsync-exclude-RPi
        - secret.env

    - name: Creates the rsnapshot cron file under /etc/cron.d (as root)
      ansible.builtin.copy:
        src: ./files/{{ item }}
        dest: "/etc/cron.d/{{ item }}"
        mode: u+rw,g+rw,o+r
        remote_src: false
        backup: true                  # make backup if it already exists
      loop:
        - rsnapshot.crontab
      notify: restart-cron

    - name: Copy the rsnapshot configuration file and backup any existing file (as root)
      ansible.builtin.copy:
        src: ./files/rsnapshot.conf
        dest: /etc/rsnapshot.conf
        mode: u+rw,g+rw,o+r
        remote_src: false
        backup: true                  # make backup if it already exists

# --- Uninstall Block of Tasks -------------------------------------------------

- name: Uninstall Rsnapshot and My Shell Scripts to Use It
  tags: ['never', 'uninstall']   # 'never' implies you must pass the other tag to execute this block
  block:
    - name: Check if rsnapshot git repository exists (as root)
      ansible.builtin.stat:
        path: '{{ backup_user_home }}/src/rsnapshot'
      register: file_exists

    - name: Clean-up rsnapshot build (as root)
      community.general.make:
        chdir: "{{ backup_user_home }}/src/rsnapshot"
        target: "{{ item }}"
      loop:
        - clean
      when: file_exists.stat.exists

    - name: Remove rsnapshot git repository (as root)
      ansible.builtin.file:
        state: absent
        path: "{{ backup_user_home }}/src/rsnapshot"
      when: file_exists.stat.exists

    - name: Delete the configuration files (as root)
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - /etc/rsnapshot
          conf.default
        - /etc/rsnapshot.conf
        - /usr/local/bin/rsnapshot
        - /usr/bin/rsnapshot

    # --------------------------------------------------------------------------

    - name: Remove backup shell scripts from ~/backup_user/bin (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.file:
        path: "{{ backup_user_home }}/bin/{{ item }}"
        state: absent
      loop:
        - full-backup.sh
        - rsnapshot-wrapper.sh
        - rsync-wrapper.sh
        - apprise.sh

    - name: Remove rsync exclude files from ~/backup_user (as user)
      become: true                           # activates privilege escalation so 'become_user' can take effect (flagged by ansible-lint)
      become_user: "{{ backup_user }}"
      ansible.builtin.file:
        path: "{{ backup_user_home }}/{{ item }}"
        state: absent
      loop:
        - rsync-exclude-RPi
        - secret.env

    - name: Remove the rsnapshot cron file from /etc/cron.d (as root)
      ansible.builtin.file:
        path: "/etc/cron.d/{{ item }}"
        state: absent
      loop:
        - rsnapshot.crontab
      notify: restart-cron

# ------------------------------------------------------------------------------

